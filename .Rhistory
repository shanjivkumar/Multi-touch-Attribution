return(mydata)
# if (k > 1) {
#   data <- eventReactive(input$go, {rnorm(input$num)})
#   output$hist <- renderPlot ({
#     hist(data(), main = isolate("Histogram of random normal values") )
#   })
#   mydata = input$dataset
#   print(input$dataset)
#   print(mydata)
#   return(mydata) }
# else {
#   return(mydata1)}
})
observe({
updateSelectInput(session, "columns",
choices = outVar())
})
}
))
runApp(list(
buget<-read.csv("Budget.csv"),
ui = bootstrapPage(
selectInput('dataset', 'Choose Dataset', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns', 'Columns', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns1', 'Columns1', c('mtcars', 'iris'),multiple = TRUE),
sliderInput(inputId = "num",
label = "choose a number",
value = 25 , min=1, max = 100),
#textInput(inputId = "title", label = "Write a title",
#       value = "Histogram of random normal values"),
actionButton(inputId = "go", label = "update"),
plotOutput("hist")
),
server = function(input, output, session){
outVar = reactive({
print(length(input$dataset))
k = 0
k = length(input$dataset)
mydata = input$dataset
print(mydata)
validate(
need((length(input$dataset) > 1), 'Cant have multiple inputs')
#need(input$in2 != '', 'Please choose a state.')
)
return(mydata)
# if (k > 1) {
#   data <- eventReactive(input$go, {rnorm(input$num)})
#   output$hist <- renderPlot ({
#     hist(data(), main = isolate("Histogram of random normal values") )
#   })
#   mydata = input$dataset
#   print(input$dataset)
#   print(mydata)
#   return(mydata) }
# else {
#   return(mydata1)}
})
observe({
updateSelectInput(session, "columns",
choices = outVar())
})
}
))
runApp(list(
buget<-read.csv("Budget.csv"),
ui = bootstrapPage(
selectInput('dataset', 'Choose Dataset', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns', 'Columns', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns1', 'Columns1', c('mtcars', 'iris'),multiple = TRUE),
sliderInput(inputId = "num",
label = "choose a number",
value = 25 , min=1, max = 100),
#textInput(inputId = "title", label = "Write a title",
#       value = "Histogram of random normal values"),
actionButton(inputId = "go", label = "update"),
plotOutput("hist")
),
server = function(input, output, session){
outVar = reactive({
print(length(input$dataset))
k = 0
k = length(input$dataset)
mydata = input$dataset
print(mydata)
validate(
need((length(input$dataset) > 1), 'Cant have multiple inputs')
#need(input$in2 != '', 'Please choose a state.')
)
return(mydata)
# if (k > 1) {
#   data <- eventReactive(input$go, {rnorm(input$num)})
#   output$hist <- renderPlot ({
#     hist(data(), main = isolate("Histogram of random normal values") )
#   })
#   mydata = input$dataset
#   print(input$dataset)
#   print(mydata)
#   return(mydata) }
# else {
#   return(mydata1)}
})
}
))
runApp(list(
buget<-read.csv("Budget.csv"),
ui = bootstrapPage(
selectInput('dataset', 'Choose Dataset', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns', 'Columns', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns1', 'Columns1', c('mtcars', 'iris'),multiple = TRUE),
sliderInput(inputId = "num",
label = "choose a number",
value = 25 , min=1, max = 100),
#textInput(inputId = "title", label = "Write a title",
#       value = "Histogram of random normal values"),
actionButton(inputId = "go", label = "update"),
plotOutput("hist")
),
server = function(input, output, session){
outVar = reactive({
print(length(input$dataset))
k = 0
k = length(input$dataset)
mydata = input$dataset
print(mydata)
if (k >1) {
validate(
need((length(input$dataset) > 1), 'Cant have multiple inputs')
#need(input$in2 != '', 'Please choose a state.')
) }
return(mydata)
# if (k > 1) {
#   data <- eventReactive(input$go, {rnorm(input$num)})
#   output$hist <- renderPlot ({
#     hist(data(), main = isolate("Histogram of random normal values") )
#   })
#   mydata = input$dataset
#   print(input$dataset)
#   print(mydata)
#   return(mydata) }
# else {
#   return(mydata1)}
})
}
))
runApp(list(
buget<-read.csv("Budget.csv"),
ui = bootstrapPage(
selectInput('dataset', 'Choose Dataset', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns', 'Columns', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns1', 'Columns1', c('mtcars', 'iris'),multiple = TRUE),
sliderInput(inputId = "num",
label = "choose a number",
value = 25 , min=1, max = 100),
#textInput(inputId = "title", label = "Write a title",
#       value = "Histogram of random normal values"),
actionButton(inputId = "go", label = "update"),
plotOutput("hist")
),
server = function(input, output, session){
reactive({
print(length(input$dataset))
k = 0
k = length(input$dataset)
mydata = input$dataset
print(mydata)
if (k >1) {
validate(
need((length(input$dataset) > 1), 'Cant have multiple inputs')
#need(input$in2 != '', 'Please choose a state.')
) }
return(mydata)
# if (k > 1) {
#   data <- eventReactive(input$go, {rnorm(input$num)})
#   output$hist <- renderPlot ({
#     hist(data(), main = isolate("Histogram of random normal values") )
#   })
#   mydata = input$dataset
#   print(input$dataset)
#   print(mydata)
#   return(mydata) }
# else {
#   return(mydata1)}
})
}
))
runApp(list(
buget<-read.csv("Budget.csv"),
ui = bootstrapPage(
selectInput('dataset', 'Choose Dataset', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns', 'Columns', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns1', 'Columns1', c('mtcars', 'iris'),multiple = TRUE),
sliderInput(inputId = "num",
label = "choose a number",
value = 25 , min=1, max = 100),
#textInput(inputId = "title", label = "Write a title",
#       value = "Histogram of random normal values"),
actionButton(inputId = "go", label = "update"),
plotOutput("hist")
),
server = function(input, output, session){
reactive({
print(length(input$dataset))
k = 0
k = length(input$dataset)
mydata = input$dataset
print(mydata)
if (k >1) {
validate(
need((length(input$dataset) > 1), 'Cant have multiple inputs')
#need(input$in2 != '', 'Please choose a state.')
) }
return(mydata)
# if (k > 1) {
#   data <- eventReactive(input$go, {rnorm(input$num)})
#   output$hist <- renderPlot ({
#     hist(data(), main = isolate("Histogram of random normal values") )
#   })
#   mydata = input$dataset
#   print(input$dataset)
#   print(mydata)
#   return(mydata) }
# else {
#   return(mydata1)}
})
}
))
runApp(list(
buget<-read.csv("Budget.csv"),
ui = bootstrapPage(
selectInput('dataset', 'Choose Dataset', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns', 'Columns', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns1', 'Columns1', c('mtcars', 'iris'),multiple = TRUE),
sliderInput(inputId = "num",
label = "choose a number",
value = 25 , min=1, max = 100),
#textInput(inputId = "title", label = "Write a title",
#       value = "Histogram of random normal values"),
actionButton(inputId = "go", label = "update"),
plotOutput("hist")
),
server = function(input, output, session){
output$hist <- renderPlot({
print(length(input$dataset))
k = 0
k = length(input$dataset)
mydata = input$dataset
print(mydata)
if (k >1) {
validate(
need((length(input$dataset) > 1), 'Cant have multiple inputs')
#need(input$in2 != '', 'Please choose a state.')
) }
return(mydata)
# if (k > 1) {
#   data <- eventReactive(input$go, {rnorm(input$num)})
#   output$hist <- renderPlot ({
#     hist(data(), main = isolate("Histogram of random normal values") )
#   })
#   mydata = input$dataset
#   print(input$dataset)
#   print(mydata)
#   return(mydata) }
# else {
#   return(mydata1)}
})
}
))
runApp(list(
buget<-read.csv("Budget.csv"),
ui = bootstrapPage(
selectInput('dataset', 'Choose Dataset', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns', 'Columns', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns1', 'Columns1', c('mtcars', 'iris'),multiple = TRUE),
sliderInput(inputId = "num",
label = "choose a number",
value = 25 , min=1, max = 100),
#textInput(inputId = "title", label = "Write a title",
#       value = "Histogram of random normal values"),
actionButton(inputId = "go", label = "update"),
plotOutput("hist")
),
server = function(input, output, session){
output$hist <- renderPlot({
print(length(input$dataset))
k = 0
k = length(input$dataset)
mydata = input$dataset
print(mydata)
if (k >1) {
validate(
need((k > 1), 'Cant have multiple inputs')
#need(input$in2 != '', 'Please choose a state.')
) }
return(mydata)
# if (k > 1) {
#   data <- eventReactive(input$go, {rnorm(input$num)})
#   output$hist <- renderPlot ({
#     hist(data(), main = isolate("Histogram of random normal values") )
#   })
#   mydata = input$dataset
#   print(input$dataset)
#   print(mydata)
#   return(mydata) }
# else {
#   return(mydata1)}
})
}
))
rm(list = ls())
library(shiny)
library(shinyBS)
campaigns_list <- letters[1:10]
ui =fluidPage(
checkboxGroupInput("campaigns","Choose campaign(s):",campaigns_list),
actionLink("selectall","Select All"),
bsModal("modalExample", "Yes/No", "selectall", size = "small",wellPanel(
actionButton("yes_button", "Yes"),
actionButton("no_button", "No")
))
)
server = function(input, output, session) {
observeEvent(input$no_button,{
updateCheckboxGroupInput(session,"campaigns","Choose campaign(s):",choices=campaigns_list)
})
observeEvent(input$yes_button,{
updateCheckboxGroupInput(session,"campaigns","Choose campaign(s):",choices=campaigns_list,selected=campaigns_list)
})
}
runApp(list(ui = ui, server = server))
install.packages("shinyBS")
rm(list = ls())
library(shiny)
library(shinyBS)
campaigns_list <- letters[1:10]
ui =fluidPage(
checkboxGroupInput("campaigns","Choose campaign(s):",campaigns_list),
actionLink("selectall","Select All"),
bsModal("modalExample", "Yes/No", "selectall", size = "small",wellPanel(
actionButton("yes_button", "Yes"),
actionButton("no_button", "No")
))
)
server = function(input, output, session) {
observeEvent(input$no_button,{
updateCheckboxGroupInput(session,"campaigns","Choose campaign(s):",choices=campaigns_list)
})
observeEvent(input$yes_button,{
updateCheckboxGroupInput(session,"campaigns","Choose campaign(s):",choices=campaigns_list,selected=campaigns_list)
})
}
runApp(list(ui = ui, server = server))
runApp('~/Documents/RShiny')
output$hist <- renderPlot({
print(length(input$dataset))
k = 0
k = length(input$dataset)
mydata = input$dataset
print(mydata)
if (k >1) {
validate(
need((k > 1), 'Cant have multiple inputs')
#need(input$in2 != '', 'Please choose a state.')
) }
return(mydata)
# if (k > 1) {
#   data <- eventReactive(input$go, {rnorm(input$num)})
#   output$hist <- renderPlot ({
#     hist(data(), main = isolate("Histogram of random normal values") )
#   })
#   mydata = input$dataset
#   print(input$dataset)
#   print(mydata)
#   return(mydata) }
# else {
#   return(mydata1)}
})
runApp(list(
buget<-read.csv("Budget.csv"),
ui = bootstrapPage(
selectInput('dataset', 'Choose Dataset', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns', 'Columns', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns1', 'Columns1', c('mtcars', 'iris'),multiple = TRUE),
sliderInput(inputId = "num",
label = "choose a number",
value = 25 , min=1, max = 100),
#textInput(inputId = "title", label = "Write a title",
#       value = "Histogram of random normal values"),
actionButton(inputId = "go", label = "update"),
plotOutput("hist")
),
server = function(input, output, session){
output$hist <- renderPlot({
print(length(input$dataset))
k = 0
k = length(input$dataset)
mydata = input$dataset
print(mydata)
if (k >1) {
validate(
need((k > 1), 'Cant have multiple inputs')
#need(input$in2 != '', 'Please choose a state.')
) }
return(mydata)
# if (k > 1) {
#   data <- eventReactive(input$go, {rnorm(input$num)})
#   output$hist <- renderPlot ({
#     hist(data(), main = isolate("Histogram of random normal values") )
#   })
#   mydata = input$dataset
#   print(input$dataset)
#   print(mydata)
#   return(mydata) }
# else {
#   return(mydata1)}
})
}
))
runApp(list(
ui = bootstrapPage(
textInput("text", "Enter Formula", "a=b+c"),
uiOutput('variables')
),
server = function(input, output){
outVar <- reactive({
vars <- all.vars(parse(text = input$text))
vars <- as.list(vars)
return(vars)
})
output$variables = renderUI({
selectInput('variables2', 'Variables', outVar())
})
}
))
library(shiny)
runApp(list(
ui = bootstrapPage(
textInput("text", "Enter Formula", "a=b+c"),
uiOutput('variables')
),
server = function(input, output){
outVar <- reactive({
vars <- all.vars(parse(text = input$text))
vars <- as.list(vars)
return(vars)
})
output$variables = renderUI({
selectInput('variables2', 'Variables', outVar())
})
}
))
getwd()
names(buget)
library(shiny)
buget<-read.csv("Budget.csv")
names(buget)
runApp(list(
ui = bootstrapPage(
textInput("text", "Enter Formula", ""),
uiOutput('variables')
),
server = function(input, output){
outVar <- reactive({
vars <- all.vars(parse(text = input$text))
vars <- as.list(vars)
return(vars)
})
output$variables = renderUI({
selectInput('variables2', 'Variables', outVar())
})
}
))
runApp(list(
buget<-read.csv("Budget.csv"),
ui = bootstrapPage(
selectInput('dataset', 'Choose Dataset', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns', 'Columns', c('mtcars', 'iris'),multiple = TRUE),
selectInput('columns1', 'Columns1', c('mtcars', 'iris'),multiple = TRUE),
sliderInput(inputId = "num",
label = "choose a number",
value = 25 , min=1, max = 100),
#textInput(inputId = "title", label = "Write a title",
#       value = "Histogram of random normal values"),
actionButton(inputId = "go", label = "update"),
plotOutput("hist")
),
server = function(input, output, session){
output$hist <- renderPlot({
print(length(input$dataset))
k = 0
k = length(input$dataset)
mydata = input$dataset
print(mydata)
if (k >1) {
validate(
need((k > 1), 'Cant have multiple inputs')
#need(input$in2 != '', 'Please choose a state.')
) }
return(mydata)
# if (k > 1) {
#   data <- eventReactive(input$go, {rnorm(input$num)})
#   output$hist <- renderPlot ({
#     hist(data(), main = isolate("Histogram of random normal values") )
#   })
#   mydata = input$dataset
#   print(input$dataset)
#   print(mydata)
#   return(mydata) }
# else {
#   return(mydata1)}
})
}
))
